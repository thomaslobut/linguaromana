"""
Django Management Command pour cr√©er l'article par d√©faut en base de donn√©es.
Cet article servira de "Point de montage" pour l'application.

Usage:
    python manage.py create_default_article
"""

import re
from datetime import date

from django.contrib.auth.models import User
from django.core.management.base import BaseCommand

from authentication.models import (
    Article,
    ArticleWord,
    Word,
    WordDefinition,
    WordTranslation,
)


class Command(BaseCommand):
    help = "Cr√©er l'article par d√©faut (Point de montage) en base de donn√©es"

    def add_arguments(self, parser):
        parser.add_argument(
            "--force",
            action="store_true",
            help="Force la recr√©ation m√™me si l'article existe d√©j√†",
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS("üåü Cr√©ation de l'article par d√©faut (Point de montage)")
        )
        self.stdout.write("=" * 60)

        try:
            # Cr√©er l'utilisateur admin
            admin_user = self.create_admin_user()

            # Cr√©er les mots de vocabulaire
            self.stdout.write("\nüìö Cr√©ation des mots de vocabulaire...")
            vocabulary_words = self.create_vocabulary_words(admin_user)

            # Cr√©er l'article par d√©faut
            self.stdout.write("\nüìÑ Cr√©ation de l'article par d√©faut...")
            article = self.create_default_article(
                admin_user, vocabulary_words, options["force"]
            )

            self.stdout.write(
                self.style.SUCCESS("\n‚úÖ Article par d√©faut cr√©√© avec succ√®s!")
            )
            self.stdout.write(f"   Titre: {article.title}")
            self.stdout.write(f"   Langue: {article.language}")
            self.stdout.write(f"   Niveau: {article.level}")
            self.stdout.write(f"   Date: {article.publication_date}")
            self.stdout.write(
                f"   Mots de vocabulaire associ√©s: {len(vocabulary_words)}"
            )

            # V√©rifier les associations
            article_words_count = ArticleWord.objects.filter(article=article).count()
            self.stdout.write(f"   Associations article-mots: {article_words_count}")

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur lors de la cr√©ation: {e}"))
            raise

    def create_admin_user(self):
        """Cr√©er un utilisateur admin s'il n'existe pas"""
        admin_user, created = User.objects.get_or_create(
            username="admin_sistema",
            defaults={
                "email": "admin@linguaromana.app",
                "is_staff": True,
                "is_superuser": True,
            },
        )
        if created:
            admin_user.set_password("admin123")
            admin_user.save()
            self.stdout.write(f"‚úÖ Utilisateur admin cr√©√©: {admin_user.username}")
        else:
            self.stdout.write(
                f"‚ÑπÔ∏è  Utilisateur admin existe d√©j√†: {admin_user.username}"
            )

        return admin_user

    def create_vocabulary_words(self, admin_user):
        """Cr√©er les mots de vocabulaire n√©cessaires pour l'article"""
        words_data = {
            "crisis": {
                "primary_language": "es",
                "translations": {
                    "es": "crisis",
                    "it": "crisi",
                    "pt": "crise",
                    "ca": "crisi",
                    "fr": "crise",
                },
                "grammar_note": "Sustantivo femenino invariable que designa una situaci√≥n grave o dif√≠cil.",
                "usage_example": "La crisis humanitaria requiere una respuesta inmediata.",
                "difficulty": "intermediate",
            },
            "humanitaria": {
                "primary_language": "es",
                "translations": {
                    "es": "humanitaria",
                    "it": "umanitaria",
                    "pt": "humanit√°ria",
                    "ca": "humanit√†ria",
                    "fr": "humanitaire",
                },
                "grammar_note": "Adjetivo femenino singular que se refiere a la ayuda y protecci√≥n de personas.",
                "usage_example": "La ayuda humanitaria es esencial en zonas de conflicto.",
                "difficulty": "intermediate",
            },
            "lanzamientos": {
                "primary_language": "es",
                "translations": {
                    "es": "lanzamientos",
                    "it": "lanci",
                    "pt": "lan√ßamentos",
                    "ca": "llan√ßaments",
                    "fr": "largages",
                },
                "grammar_note": 'Sustantivo masculino plural derivado del verbo "lanzar".',
                "usage_example": "Los lanzamientos a√©reos son una forma de entregar suministros.",
                "difficulty": "advanced",
            },
            "a√©reos": {
                "primary_language": "es",
                "translations": {
                    "es": "a√©reos",
                    "it": "aerei",
                    "pt": "a√©reos",
                    "ca": "aeris",
                    "fr": "a√©riens",
                },
                "grammar_note": "Adjetivo masculino plural que se refiere a todo lo relacionado con el aire o la aviaci√≥n.",
                "usage_example": "Los ataques a√©reos causaron gran destrucci√≥n.",
                "difficulty": "intermediate",
            },
            "controversia": {
                "primary_language": "es",
                "translations": {
                    "es": "controversia",
                    "it": "controversia",
                    "pt": "controv√©rsia",
                    "ca": "controv√®rsia",
                    "fr": "controverse",
                },
                "grammar_note": "Sustantivo femenino que designa una discusi√≥n o debate p√∫blico.",
                "usage_example": "El tema gener√≥ una gran controversia en los medios.",
                "difficulty": "advanced",
            },
        }

        created_words = {}

        for word_text, word_info in words_data.items():
            # Cr√©er ou r√©cup√©rer le mot
            word, created = Word.objects.get_or_create(
                word=word_text,
                defaults={
                    "primary_language": word_info["primary_language"],
                    "created_by": admin_user,
                },
            )

            if created:
                self.stdout.write(f"‚úÖ Mot cr√©√©: {word_text}")
            else:
                self.stdout.write(f"‚ÑπÔ∏è  Mot existe d√©j√†: {word_text}")

            # Cr√©er les traductions
            for lang_code, translation in word_info["translations"].items():
                translation_obj, created = WordTranslation.objects.get_or_create(
                    word=word,
                    language=lang_code,
                    defaults={
                        "translation": translation,
                        "part_of_speech": "noun"
                        if word_text in ["crisis", "lanzamientos", "controversia"]
                        else "adjective",
                    },
                )

                if created:
                    self.stdout.write(
                        f"   ‚úÖ Traduction cr√©√©e: {word_text} -> {translation} ({lang_code})"
                    )

            # Cr√©er la d√©finition
            definition, created = WordDefinition.objects.get_or_create(
                word=word,
                defaults={
                    "grammar_note": word_info["grammar_note"],
                    "usage_example": word_info["usage_example"],
                    "difficulty_level": word_info["difficulty"],
                },
            )

            if created:
                self.stdout.write(f"   ‚úÖ D√©finition cr√©√©e pour: {word_text}")

            created_words[word_text] = word

        return created_words

    def create_default_article(self, admin_user, vocabulary_words, force=False):
        """Cr√©er l'article par d√©faut 'Point de montage'"""

        article_title = "Crisis humanitaria en Gaza: Los lanzamientos a√©reos de ayuda generan controversia"
        article_content = """La [crisis] [humanitaria] en Gaza ha alcanzado proporciones alarmantes, y los [lanzamientos] [a√©reos] de ayuda se han convertido en una medida desesperada para proporcionar asistencia a la poblaci√≥n civil atrapada en el conflicto.

Sin embargo, esta forma de entrega de suministros ha generado una gran [controversia] entre organizaciones humanitarias y expertos en ayuda internacional. Mientras algunos argumentan que es la √∫nica forma viable de hacer llegar alimentos y medicinas a las zonas m√°s afectadas, otros critican que los lanzamientos a√©reos son imprecisos y potencialmente peligrosos.

Los defensores de esta estrategia sostienen que, ante la imposibilidad de acceso terrestre seguro, los lanzamientos a√©reos representan una l√≠nea de vida crucial para miles de familias. No obstante, los cr√≠ticos se√±alan que esta metodolog√≠a puede causar m√°s da√±o que beneficio, ya que los suministros pueden caer en zonas inadecuadas o incluso lastimar a civiles."""

        # V√©rifier si l'article existe d√©j√†
        existing_article = Article.objects.filter(title=article_title).first()

        if existing_article and not force:
            self.stdout.write(
                f"‚ÑπÔ∏è  Article par d√©faut existe d√©j√†: {existing_article.title}"
            )
            return existing_article

        if existing_article and force:
            # Supprimer les associations existantes
            ArticleWord.objects.filter(article=existing_article).delete()
            existing_article.delete()
            self.stdout.write("üóëÔ∏è  Article existant supprim√© (force=True)")

        # Cr√©er l'article
        article = Article.objects.create(
            title=article_title,
            content=article_content,
            language="es",
            level="advanced",
            publication_date=date.today(),
            is_active=True,
        )

        self.stdout.write(f"‚úÖ Article par d√©faut cr√©√©: {article.title}")

        # Cr√©er les associations ArticleWord
        words_in_brackets = [
            "crisis",
            "humanitaria",
            "lanzamientos",
            "a√©reos",
            "controversia",
        ]

        for word_text in words_in_brackets:
            if word_text in vocabulary_words:
                word = vocabulary_words[word_text]

                # Trouver toutes les positions du mot dans le contenu
                pattern = f"\\[{re.escape(word_text)}\\]"
                matches = list(re.finditer(pattern, article_content))

                for i, match in enumerate(matches):
                    article_word = ArticleWord.objects.create(
                        article=article,
                        word=word,
                        position_in_text=match.start(),
                        context_sentence=article_content,
                        is_key_vocabulary=True,
                    )

                    self.stdout.write(
                        f"   ‚úÖ Association cr√©√©e: {article.title} -> {word_text} (pos: {match.start()})"
                    )

        return article
