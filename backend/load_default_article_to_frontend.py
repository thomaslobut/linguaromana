#!/usr/bin/env python3
"""
Script pour charger l'article par d√©faut depuis la base de donn√©es Django
et l'ajouter au localStorage du frontend.

Cela simule la synchronisation entre Django et le frontend jusqu'√† ce que
l'API soit compl√®tement impl√©ment√©e.

Usage:
    python load_default_article_to_frontend.py
"""

import json
import os
import sys

import django

# Setup Django
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "linguaromana_backend.settings")
django.setup()

from authentication.models import Article, ArticleWord


def load_default_article():
    """Charger l'article par d√©faut depuis la base Django"""
    try:
        # R√©cup√©rer l'article par d√©faut cr√©√©
        article = Article.objects.filter(
            title__icontains="Crisis humanitaria en Gaza"
        ).first()

        if not article:
            print("‚ùå Article par d√©faut non trouv√© en base de donn√©es")
            return None

        # R√©cup√©rer les mots-cl√©s associ√©s
        article_words = ArticleWord.objects.filter(article=article)
        keywords = [aw.word.word for aw in article_words]

        # Convertir au format frontend
        frontend_article = {
            "id": str(article.id),
            "title": article.title,
            "content": article.content,
            "language": article.language,
            "level": article.level,
            "date": article.publication_date.isoformat(),
            "summary": "Article sur la crise humanitaire √† Gaza et les lanzamientos a√©reos de ayuda",
            "keywords": keywords,
            "status": "published",
            "type": "default",
            "createdAt": article.created_at.isoformat(),
            "updatedAt": article.created_at.isoformat(),
            "isFeatured": True,
        }

        print(f"‚úÖ Article charg√©: {article.title}")
        print(f"   ID: {article.id}")
        print(f"   Langue: {article.language}")
        print(f"   Niveau: {article.level}")
        print(f"   Date: {article.publication_date}")
        print(f"   Mots-cl√©s: {', '.join(keywords)}")

        return frontend_article

    except Exception as e:
        print(f"‚ùå Erreur lors du chargement: {e}")
        return None


def generate_frontend_data(article):
    """G√©n√©rer les donn√©es √† injecter dans le frontend"""
    if not article:
        return None

    # Structure pour le localStorage
    custom_articles = [article]

    localStorage_data = {
        "linguaromana_custom_articles": json.dumps(custom_articles, indent=2),
    }

    return localStorage_data


def create_frontend_initialization_script(localStorage_data):
    """Cr√©er un script JavaScript pour initialiser le localStorage"""
    if not localStorage_data:
        return None

    script_content = (
        """// Script d'initialisation pour charger l'article par d√©faut
// Ce script doit √™tre ex√©cut√© dans la console du navigateur ou int√©gr√© √† l'application

console.log("üåü Chargement de l'article par d√©faut depuis Django...");

// Donn√©es de l'article par d√©faut
const defaultArticleData = """
        + localStorage_data["linguaromana_custom_articles"]
        + """;

// Charger dans le localStorage
localStorage.setItem('linguaromana_custom_articles', JSON.stringify(defaultArticleData));

console.log("‚úÖ Article par d√©faut charg√© dans le localStorage");
console.log("Rechargez la page pour voir l'article");

// Optionnel: recharger automatiquement la page
// window.location.reload();
"""
    )

    return script_content


def main():
    """Fonction principale"""
    print("üåü Chargement de l'article par d√©faut pour le frontend")
    print("=" * 60)

    # Charger l'article depuis Django
    article = load_default_article()

    if not article:
        print("‚ùå Impossible de charger l'article")
        sys.exit(1)

    # G√©n√©rer les donn√©es frontend
    localStorage_data = generate_frontend_data(article)

    # Cr√©er le script d'initialisation
    script = create_frontend_initialization_script(localStorage_data)

    # Sauvegarder le script
    script_path = os.path.join(
        os.path.dirname(__file__), "..", "initialize_default_article.js"
    )
    with open(script_path, "w", encoding="utf-8") as f:
        f.write(script)

    print(f"\n‚úÖ Script d'initialisation cr√©√©: {script_path}")
    print("\nüìã Instructions:")
    print("1. Ouvrez votre navigateur sur l'application")
    print("2. Ouvrez la console d√©veloppeur (F12)")
    print("3. Copiez-collez le contenu du fichier initialize_default_article.js")
    print("4. Appuyez sur Entr√©e pour ex√©cuter")
    print("5. Rechargez la page")

    # Afficher √©galement les donn√©es JSON pour r√©f√©rence
    json_path = os.path.join(
        os.path.dirname(__file__), "..", "default_article_data.json"
    )
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(localStorage_data, f, ensure_ascii=False, indent=2)

    print(f"\nüìÑ Donn√©es JSON sauvegard√©es: {json_path}")


if __name__ == "__main__":
    main()
